---
title: "Teste Luciano contagem e medidas"
format: html
editor: visual
---

## Ativar a biblioteca e setar repo de imagens

Nesse caso as imagens deverão estar na pasta img deste documento

```{r}
library(pliman)

set_wd_here("img")
```

## Metodos de medir o fungo

Nesse caso as imagens deverão estar na pasta img com o nome fungo

```{r}
fungo <- image_import("fungo.jpeg", plot = TRUE)
```

## Medir o fungo com referencias

Quando iniciar o comando analyze voce deve utilizar o botão draw marker para pegar pontos aonde o fungo não se encontra e clicar em done, logo apos selecione o fungo.

```{r}
res <-analyze_objects(fungo,
                  viewer = "map",
                  pick_palettes = TRUE,
                  filter = 5,
                  watershed = FALSE,
                  contour_size = 6)


get_measures(res, dpi = 90) |> plot_measures(measure = "area", col = "black",size = 2)
```

## Medir automatizado o exemplo

Nesse caso tentarei automatizar para pegar a medida, dependendo da imagem necessita mexer no size(Placa_Petri) ,Filter(Fungo_contorno) e dpi (placa de petri de 90mm)

```{r}
Placa_Petri <- image_segment_mask(fungo,shape = "disc", size = 280, plot = TRUE)

fungo_Foto <- image_index(Placa_Petri,index = "HUE")

fungo_Binary <- image_binary(Placa_Petri,index = "HUE", filter = 5)[[1]]

fungo_contorno <- analyze_objects(Placa_Petri,index = "HUE",invert = TRUE , filter = 7)


get_measures(fungo_contorno, dpi = 90) |> plot_measures(measure = "area", col = "black",size = 3)

```

## Espaço de Testes

```{r}
library(pliman)

set_wd_here("img")
fungo <- image_import("teste-area.jpeg", plot = FALSE)

imgres <- dpi(fungo, viewer = "mapview")
fungo <- image_resize(fungo, rel_size = 50, plot = TRUE)
hw <- image_dimension(fungo)
Placa_Petri <- image_segment_mask(fungo,shape = "disc", plot = TRUE, size = hw[[2]]-1)

indexes <- image_index(Placa_Petri, index = c("R, HUE, B, GRAY, S, R-(B/G)"))

fungo_Foto <- image_index(Placa_Petri,index = indexes)

fungo_Binary <- image_binary(Placa_Petri,index = "", filter = 10)[[0]]

fungo_contorno <- analyze_objects(Placa_Petri,index = "",invert = TRUE , filter = 8)

get_measures(fungo_contorno, dpi = imgres) |> plot_measures(measure = "area", col = "black",size = 3)

```

## Espaço de Testes automatizados (imagens 590x600)

```{r}
library(pliman)
set_wd_here("img")
fungo <- image_import("teste-area.jpeg", plot = FALSE)

fungo <- image_resize(fungo,rel_size = 50,plot = TRUE)
pegar_circulo <- image_dimension(fungo)

fungo <- image_segment_mask(fungo, shape = "disc",size = pegar_circulo[[2]] -1)

indexes <- c("BIM,L*,L,GRAY")

```

## Metodos de Contagem (necessita de otimização na contagem dos halos)

Nesse caso as imagens deverão estar na pasta img com o nome contagem

```{r}
library(pliman)
library(tidyverse)
library(ggridges)

set_wd_here("img")

contagem <- image_import("bacterias.jpg", plot = TRUE)

# ignorar comando a baixo, pois a imagem ja esta 400x400
#contagem <- image_resize(contagem,rel_size = 50)

x <- image_dimension(contagem)

indexes <- c("R,B,G,HUE,HUE2,BIM")

contagem <- image_segment_mask(contagem, shape = "disc",size = x[[1]]-31)

image_index(contagem, index = indexes)

#area total da placa colonizada
seg <- image_segment(contagem,
                     index = "HUE",
                     col_background = "BLACK",
                     invert = FALSE,
                     plot = TRUE)

#seguementar colonias com seus halos
seg2 <- image_segment(contagem,
                     index = "HUE",
                     col_background = "BLACK",
                     invert = TRUE,
                     plot = TRUE)

#verificar qual index as colonias ficam mais evidentes
image_index(seg2, index = indexes)

#codigo para pegar DPI (fazer uma linha com drawn line de um canto a outro e botar "9")
pegar_dpi <- dpi(contagem,viewer = "map")

#tentar pegar somente os halos
seg3 <- image_segment(seg2,
                      index = "HUE2",
                      col_background = "BLACK",
                      invert = FALSE,
                      plot = TRUE)
#pegar o espaço entre as colonias
res1 <- 
  analyze_objects(seg2,
                  index = "G",
                  invert = TRUE,
                  marker = "point")
#pegar as colonias (halos completos)
res2 <- 
  analyze_objects(seg,
                  index = "R")
get_measures(res2, dpi = pegar_dpi) |> plot_measures(measure = "area", col = "RED",size = 1)


res3 <-
  analyze_objects(seg3,
                  index = "HUE2",
                  invert = TRUE,
                  marker = "id")
```

## Retirar % de graos do monitor campo john deere

Nesse caso as imagens deverão estar na pasta img com o nome monitortrator, tentativa de separar Verde (3 tonalidades como podemos ver na foto) , Amarelo (somente 1 tonalidade), Laranja (2 tipos de tonalidade) e Vermelho (2 tipos de tonalidade)

```{r}
library(pliman)
library(tidyverse)
set_wd_here("img")
monitor <- image_import("monitortrator.jpeg", plot = TRUE)

pegar_circulo <- image_dimension(monitor)

monitor <- image_segment_mask(monitor, shape = "disc",size = pegar_circulo[[2]])

set_pliman_viewer("mapview")
plot(monitor)
res <- analyze_objects(monitor,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

monitor_tratamentos <- image_import(img = "monitor_tratamentos.jpg")

moni1 <- image_crop(img = monitor_tratamentos)
moni2 <- image_crop(img = monitor_tratamentos)
moni3 <- image_crop(img = monitor_tratamentos)
moni4 <- image_crop(img = monitor_tratamentos)
moni5 <- image_crop(img = monitor_tratamentos)
moni6 <- image_crop(img = monitor_tratamentos)
moni7 <- image_crop(img = monitor_tratamentos)
moni8 <- image_crop(img = monitor_tratamentos)
moni9 <- image_crop(img = monitor_tratamentos)
moni10 <- image_crop(img = monitor_tratamentos)

trata1 <- analyze_objects(moni1,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata2 <- analyze_objects(moni2,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata3 <- analyze_objects(moni3,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata4 <- analyze_objects(moni4,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata5 <- analyze_objects(moni5,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata6 <- analyze_objects(moni6,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata7 <- analyze_objects(moni7,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata8 <- analyze_objects(moni8,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata9 <- analyze_objects(moni9,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

trata10 <- analyze_objects(moni10,
                       watershed = FALSE,
                       object_index = "R",
                       pixel_level_index = TRUE)

imagem_palheta <- image_import(img = "palheta.jpeg", plot = TRUE)

men70 <- image_crop(imagem_palheta) 
entre7080 <- image_crop(imagem_palheta)
entre8090 <- image_crop(imagem_palheta)
entre90100 <- image_crop(imagem_palheta) 
entre100110 <- image_crop(imagem_palheta)
entre110120 <- image_crop(imagem_palheta)
entre120130 <- image_crop(imagem_palheta)
maior130 <- image_crop(imagem_palheta)

men70 <- 
  image_to_mat(men70) %>% 
  mutate(classe = "70")
entre7080 <- 
  image_to_mat(entre7080) %>%
  mutate(classe = "7080")
entre8090 <- 
  image_to_mat(entre8090) %>% 
  mutate(classe = "8090")
entre90100 <- 
  image_to_mat(entre90100) %>% 
  mutate(classe = "90100")
entre100110 <- 
  image_to_mat(entre100110) %>% 
  mutate(classe = "100110")
entre110120 <- 
  image_to_mat(entre110120) %>% 
  mutate(classe = "110120")
entre120130 <- 
  image_to_mat(entre120130) %>% 
  mutate(classe = "120130")
maior130 <- 
  image_to_mat(maior130) %>%
  mutate(classe = "130")

dfbind <- 
  bind_rows(men70, entre7080,entre8090,entre90100,entre100110,entre110120,entre120130,maior130) %>% 
  rename(R = B1, G = B2, B = B3) %>% 
  mutate(classe = as.factor(classe))

library(caret)
trcont <- trainControl(
  method = "cv",
  p = 0.7,
  number = 10,
  verboseIter = TRUE
)
mod <- train(
  classe ~ R + G + B,
  method = "rf",
  ntree = 100,
  tuneGrid = expand.grid(.mtry = 5),
  data = dfbind,
  trControl = trcont
)


# pixels do pivo
pix <- 
  res$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n),
         mediclasse = c(105, 115, 125, 130, 70, 75, 85, 95),
         prodest = prop * mediclasse) 

pix1 <- 
  trata1$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix2 <- 
  trata2$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix3 <- 
  trata3$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix4 <- 
  trata4$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix5 <- 
  trata5$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix6 <- 
  trata6$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix7 <- 
  trata7$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix8 <- 
  trata8$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix9 <- 
  trata9$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 

pix10 <- 
  trata10$object_rgb %>% 
  select(2:4) %>% 
  mutate(classe = predict(mod, newdata = .)) %>% 
  group_by(classe) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n)) 


library(rio)
export(pix, "resultado_pivo_2.xlsx")

export(pix1, "resultado_tratamento_1.xlsx")
export(pix2, "resultado_tratamento_2.xlsx")
export(pix3, "resultado_tratamento_3.xlsx")
export(pix4, "resultado_tratamento_4.xlsx")
export(pix5, "resultado_tratamento_5.xlsx")
export(pix6, "resultado_tratamento_6.xlsx")
export(pix7, "resultado_tratamento_7.xlsx")
export(pix8, "resultado_tratamento_8.xlsx")
export(pix9, "resultado_tratamento_9.xlsx")
export(pix10, "resultado_tratamento_10.xlsx")

```
